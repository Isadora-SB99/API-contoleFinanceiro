name: Entrega contÃ­nua

on:
  workflow_call:

jobs:

  ec2:
      runs-on: ubuntu-latest

      steps:      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: jar-artifact
          
      - uses: actions/checkout@v3
      
#      - name: Deploy to Server
 #       uses: easingthemes/ssh-deploy@main
  #      env:
   #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
     #       REMOTE_USER: ${{ secrets.REMOTE_USER }}
      #      TARGET: /home/${{ secrets.REMOTE_USER }}
            
#      - name: SSH Remote Commands
 #       uses: appleboy/ssh-action@v0.1.7
  #      with:
   #       host: ${{ secrets.REMOTE_HOST }}
    #      username: ${{ secrets.REMOTE_USER }}
     #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #    port: 22
       #   script: |
        #    export HOST=${{ secrets.DBHOST }}
         #   export USER=${{ secrets.DBUSER }}
          #  export PASSWORD=${{ secrets.DBPASSWORD }}
           # export DBNAME=${{ secrets.DBNAME }}
            #export DBPORT=${{ secrets.PORT }}
          
          
      #- name: Remote SSH Commands
      #https://github.com/marketplace/actions/remote-ssh-commands
       # uses: fifsky/ssh-action@v0.0.6
        #with:
          # Command to execute on the remote server.
        #  command: 
          # Hostname or IP address of the server.
         # host: # optional, default is localhost
          # Username for authentication.
          #user: # optional, default is root
          # Port number of the server.
       #   port: # optional, default is 22
          # String that contains a private key for either key-based or hostbased user authentication (OpenSSH format)
   #       key: # optional
          # File location to an identity file
    #      keyfile: # optional
          # Password for authentication.
     #     pass: # optional
          # SSH parameters for example: -tt.
      #    args: # optional
          
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME : ${{ secrets.REMOTE_HOST }}
            USER_NAME : ${{ secrets.REMOTE_USER }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${REMOTE_USER}@${REMOTE_HOST} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ubuntu/CounterApp &&
            git checkout master &&
            git fetch --all &&
            git reset --hard origin/master &&
            git pull origin master &&
            docker-compose -f docker-compose.prod.yml up -d --build 
          '          
          
          
          
          
          
